This is the framework module for Typolight. It aims to make the life of
developpers coming from Rails or Symfony easier.

Its components are :

- EModel : an enhancement of the basic model class ( with dynamic finders,
  associations, and others )

- ManyToManyCheckbox : a widget to handle many to many associations through
  join tables.

- Route : a model to handle routing in Typolight.

- HardRoutesList, RoutesWizard, ParamWizard : so helpers module for managing
  routes in backend.

- Json : a model to handle json response.

- EventBackendModule : a module to build an event driven backend module

---------------
The model layer
---------------

The core Model class of Typolight is underused. It is a singleton, mostly used
by User and all the sql request are hand coded.

The EModel bring some sugar in this. It redeclares the __construct() function as
public, it let you manage some associations and brings a dynamic finder.

The many to many association can be handled by to ManyToManyCheckbox.



---------------
The route layer
---------------

Routes let you have more control on the url. You can define a route name, its params
and tell where to go when it matches.

Routes can be defined in $GLOBALS[ 'TL_ROUTES' ] or in the database, through the route
backend module.

RoutedModule should be used instead of Module for frontend modules. It parse the params,
find what action to launch and which format to send back ( html or json ).


------------------
EventBackendModule
------------------

This module is an helper for building backend module without dca.

A GET 'action' param can be use to select the method get_THE_VALUE.
A POST action array param can be used to, letting you launching an
action by the name of a button, with several button in the same form.

eg:
...
<input type="submit" name="action[delete]" value="delete" />
<input type="submit" name="action[update]" value="update" />
...

Default action is index(). Any other action redirect to index after
processing if html format is requested ( default ), or die in a json
response if json format is requested.


----------------
Third party libs
----------------

The framework module include a copy of :
- addLiveEvent, by Yannick Croissant


