h2(#basics). Basics

A FrontendController is a mean to handle easily several actions in a single module. Instead of using a huge amount of Module, or a Module and put a switch in your compile() or generate(), like "if action is show, or if action is list, or if action is delete", etc, you can spawn those automatically into several methods.

This make sense used together with the routes, so a single module can handle a whole resource, and all its pages, from the visitor point of view, but it's still in a single page or module in the backend, and in a clean single file (don't be afraid of this single file, you will see the framework extension make it really concise).

All you have to do is to create your controller class extending FrontendController, give a controller name through the protected controller attribute, and write your actions, prefixing them by 'action_'. Here is an example :

bc.. class ControllerBooks extends FrontendController
{
  protected $controller = 'books';

  protected function action_index()
  {
    // we use the index action as list for books. So here, we want
    // the ten most recently published books.
    $carbon = new Book();
    $books = $carbon->getAll( 'created_at desc', array( 'published = 1' ), 10 );

    $this->Template->books = $books;
  }

  protected function action_show()
  {
    // find a book by its id, passed as GET param
    $book = new Book( $this->Input->get( 'book_id' ) );
   
    $this->checkExists( $book );
    $this->Template->book = $book;
  }

  protected function action_order()
  {
    $book = new Book( $this->Input->get( 'book_id' ) );
    $this->checkExists( $book );
    $member = new FwMember();

    if ( $member->toCurrent() and $member->Cart()->add( $book ) )
    {
      $this->Template->success = true;
    }
  }

  protected function checkExists( Book $book )
  {
    if ( ! $book->id or ! $book->published )
    {
      $this->redirect( 'book-doesnt-exist.html' );
    }
  }
}

p. Every FrontendController should have a least an action_index action.  This is the default action if none is specified.

The Template to use is determined by the controller name and the action name : 

bc. 'mod_' . <controller_name> . '_' . <action_name>

So, the template for the default action of a books controller would be mod_books_index.tpl . Then, if you have a action_show method, the template will be mod_books_show.tpl and mod_books_order.tpl for the order action.  Since checkExists isn't an action ( it isn't prefixed by 'action_' ), it doesn't need a template.

You can override the template in an action using $this->render. Set it to name of the template you want to render. Don't worry about what you have passed to $this->Template, the actual template is render after you runned your action, and $this->Template is just a fake object from which template variables will be retrieved. So, you can set $this->render at the bottom of your action, if you want to.

A action *must* have a template associated (the template file must exist), or it will throw an exception.  The only exception for that is actions that always redirect elsewhere.



h2(#run). Ok. So, how do I select which action to run?

When a FrontendController is generated, it first check if it was asked to render a single action, whatever is the context ( more on this below, in the "Forcing an action" section ). If not, it checks to "action" GET parameter. So, if you want to render a show action, just pass ?action=show as query string in the url. If no action parameter exists, it will render the 'index' action.

Selecting action this way is useful, but not very pretty. If you want to use an url such as "mydomain.com/books/1/show.html" rather than "mydomains.com/books.html?action=show&book_id=1", see the  "Route" documentation.



h2(#filters). Before and after filters

There often are some methods you want to call on many actions. For example, to edit and delete an image, you want to ensure the person requesting it is actually the one that created it. Or you may want to update the last activity timestamp of a member after every action.

To avoid putting the method call in each action, you can use the beforeFilter and afterFilter arrays. Each entry can be either a method name ( and the method will be called on each action ), or an array with the method name as key. The array can contains an 'only' array or an 'except' array, listing the only method names the filter should apply on, or the ones it should not.

Additionnaly, there is a shortcut to pass getter values to the template, because this is a common task : you can set passSomething as method name, and the template will receive $this->something.

So, if we take our previous controller :

bc.. class ControllerBooks extends FrontendController
{
  protected $controller = 'books';
  protected $currentMember;
  protected $book;

  protected beforeFilter = array( 
    'passCurrentMember',
    'checkExists'          => array( 'only' => array( 'show', 'order' ) ),
    'passBook'             => array( 'except' => 'index' ),
  )

  public function generate()
  {
    $this->currentMember = new FwMember();
    $this->currentMember->toCurrent();
    $this->book = new Book( $this->Input->get( 'book_id' ) );
    
    return parent::generate();
  }

  protected function action_index()
  {
    // we use the index action as list for books. So here, we want
    // the ten most recently published books.
    $carbon = new Book();
    $books = $carbon->getAll( 'created_at desc', array( 'published = 1' ), 10 );

    $this->Template->books = $books;
  }

  protected function action_show()
  {
    $this->Template->book = $book;
  }

  protected function action_order()
  {
    if ( $this->member->toCurrent() and $this->member->Cart()->add( $this->book ) )
    {
      $this->Template->success = true;
    }
  }

  protected function checkExists()
  {
    if ( ! $this->book->id or ! $this->book->published )
    {
      $this->redirect( 'book-doesnt-exist.html' );
    }
  }
}

p. So here, every template is passed the current member, accessible in the template through $this->currentMember, show and order actions are passed the book retrieve from the book_id GET param, and a check is runned to see if the book actually exists and is published.

That saves us a bit of typing, but we could probably do better. We had to override the generate() method, which is launched for every single actions, just to perform this simple task.

Actually, the 'pass*' before filters play well with getters.




h2(#getters-setters). Getters and setters

Just like EModel and BackendController, FrontendController can handle virtual attributes through getter and setter methods. Just define a function getSomething() or setSomething( $value ).

You can then do :

bc. echo $this->something;
$this->something = 'foo';

The result is cached, so you don't have to worry about speed issues. If you want to bypass the cache, you can call the method explicitly ( its result won't be cache either ).  If you want to never cache a virtual attribute, put its name in the $uncachable array.

If you have defined a getter, you have a setter for free ( it will change the cached value ).  So, write setters only if you want to do special things rather than simply setting the value.

bc.. class ControllerBooks extends FrontendController
{
  protected $controller = 'books';

  protected beforeFilter = array( 
    'passCurrentMember',
    'checkExists'          => array( 'only' => array( 'show', 'order' ) ),
    'passBook'             => array( 'except' => 'index' ),
  )

  protected function action_index()
  {
    // we use the index action as list for books. So here, we want
    // the ten most recently published books.
    $carbon = new Book();
    $books  = $carbon->getAll( 'created_at desc', array( 'published = 1' ), 10 );

    $this->Template->books = $books;
  }

  protected function action_show()
  {
    $this->Template->book = $book;
  }

  protected function action_order()
  {
    if ( $this->member->toCurrent() and $this->member->Cart()->add( $this->book ) )
    {
      $this->Template->success = true;
    }
  }

  protected function checkExists()
  {
    if ( ! $this->book->id or ! $this->book->published )
    {
      $this->redirect( 'book-doesnt-exist.html' );
    }
  }

  protected function getCurrentMember()
  {
    $currentMember = new FwMember();
    $currentMember->toCurrent();
    return $currentMember;
  }

  protected function getBook()
  {
    return new Book( $this->Input->get( 'book_id' ) );
  }
}

p. Now, the very first time $this->currentMember is written, the getCurrentMember() is called.  Its result is cached and returned every following access to $this->currentMember, so you can use it any times you want without thinking about sql requests count.

As passBook is actually calling $this->Template->book = $this->book, you can pass virtual attribute from a getter to the template without the need of any extra code.



h2(#flash). Flash messages

Sometimes, you would like to pass messages from an action to another. For exemple, after a POST request, you may want to redirect the visitor somewhere else, to prevent the double post through reloading the page. But how to let him know the query was successful if you redirect?  Instead of settings others actions in order to say "Ok, it's cool" or "No, it's not", you can use $this->passMessage(). This method take two parameters : the message and optionnaly the warn level ( any string you want, info is used by default ).

In the next action, in any FrontendController, you can retrieve the message through $GLOBALS[ 'TL_MSG' ][ <level> ]

To avoid handling it again and again, you can use the ModuleMessage module.

In our previous controller, we can use this in order not to have a template for the order action.  Actually, the only thing we want to say is : "The book was added to your cart", or "Sorry, this book doesn't exist anymore". Giving an whole page just for this is a bit excessive. Here how we can do it :

bc.. class ControllerBooks extends FrontendController
{
  protected $controller = 'books';

  protected beforeFilter = array( 
    'passCurrentMember',
    'checkExists'          => array( 'only' => array( 'show', 'order' ) ),
    'passBook'             => array( 'except' => 'index' ),
  )

  protected function action_index()
  {
    // we use the index action as list for books. So here, we want
    // the ten most recently published books.
    $carbon = new Book();
    $books  = $carbon->getAll( 'created_at desc', array( 'published = 1' ), 10 );

    $this->Template->books = $books;
  }

  protected function action_show()
  {
    $this->Template->book = $book;
  }

  protected function action_order()
  {
    if ( $this->member->toCurrent() and $this->member->Cart()->add( $this->book ) )
    {
      $this->passMessage( $GLOBALS[ 'TL_LANG' ][ 'TL_MSC' ][ 'ControllerBooks' ][ 'book_added_to_cart' ] );
    }

    else
    {
      $this->passMessage( $GLOBALS[ 'TL_LANG' ][ 'TL_MSC' ][ 'ControllerBooks' ][ 'cart_error' ], 'error' );
    }

    // see the route documentation for more explaination on this
    $this->redirect( Route::composeI18n( 'books_show', array( 'book_id' => $book->id ) ) );
  }

  protected function checkExists()
  {
    if ( ! $this->book->id or ! $this->book->published )
    {
      $this->passMessage( $GLOBALS[ 'TL_LANG' ][ 'TL_MSC' ][ 'ControllerBooks' ][ 'book_doesnt_exist' ], 'error' );

      // see the route documentation for more explaination on this
      $this->redirect( Route::composeI18n( 'books_index' ) );
    }
  }

  protected function getCurrentMember()
  {
    $currentMember = new FwMember();
    $currentMember->toCurrent();
    return $currentMember;
  }

  protected function getBook()
  {
    return new Book( $this->Input->get( 'book_id' ) );
  }
}

p. Ok, now we can discard the mod_books_order.tpl template and the book-doesnt-exist page. Just get a ControllerMessages module somewhere in your layout and it will handle messages for you.



h2(#lang). Languages

If you are designing a multi language website, accessing $GLOBALS[ 'TL_LANG' ] in deep keys can be very time consuming. To make this quicker, a FrontendController is always assigned the content of $GLOBALS[ 'TL_LANG' ][ 'MSC' ][ <controllerClassName> ] as $this->lang.

This is passed as is to the template, so you can use $this->lang in the template too.

For every action in your controller, you can define a key in this array, in you language file, to give a friendly name. This in mainly used when creating the module in the backend, if you want to force an action. The key should be : @<controller_name>_<action_name>@ .

Now, here is the final version of our book controller :

bc.. class ControllerBooks extends FrontendController
{
  protected $controller = 'books';

  protected beforeFilter = array( 
    'passCurrentMember',
    'checkExists'          => array( 'only' => array( 'show', 'order' ) ),
    'passBook'             => array( 'except' => 'index' ),
  )

  protected function action_index()
  {
    // we use the index action as list for books. So here, we want
    // the ten most recently published books.
    $carbon = new Book();
    $books  = $carbon->getAll( 'created_at desc', array( 'published = 1' ), 10 );

    $this->Template->books = $books;
  }

  protected function action_show()
  {
    $this->Template->book = $book;
  }

  protected function action_order()
  {
    if ( $this->member->toCurrent() and $this->member->Cart()->add( $this->book ) )
    {
      $this->passMessage( $this->lang[ 'book_added_to_cart' ] );
    }

    else
    {
      $this->passMessage( $this->lang[ 'cart_error' ], 'error' );
    }

    // see the route documentation for more explaination on this
    $this->redirect( Route::composeI18n( 'books_show', array( 'book_id' => $book->id ) ) );
  }

  protected function checkExists()
  {
    if ( ! $this->book->id or ! $this->book->published )
    {
      $this->passMessage( $this->lang[ 'book_doesnt_exist' ], 'error' );

      // see the route documentation for more explaination on this
      $this->redirect( Route::composeI18n( 'books_index' ) );
    }
  }

  protected function getCurrentMember()
  {
    $currentMember = new FwMember();
    $currentMember->toCurrent();
    return $currentMember;
  }

  protected function getBook()
  {
    return new Book( $this->Input->get( 'book_id' ) );
  }
}


h2(#force). Forcing an action

If you want to force an action for a specific module, you will have to change the tl_module dca in your extension. For exemple, if I have defined in my config.php :

bc. $GLOBALS[ 'FE_MOD' ][ 'application' ][ 'books' ] = 'ControllerBooks';

I add this in the tl_module.php dca file :

bc. $GLOBALS[ 'TL_DCA' ][ 'tl_module' ][ 'palettes' ][ 'books' ] = 'name,type;defaultRoutedAction,forceRoutedAction;';

This way, when I create a new books module, I can check the "force route" checkbox and set the default ( and thus unique ) route to, eg, 'lastest'. This will only render action_latest for this module.  No worry if you then create an other module which rely on the action parameter, only the current module is forced.

This let you use FrontendControllers in your layout without taking into account the action GET parameter.



h2(#breadcrumb-hack). But wait, the breadcrumb module show the same page for every single action!

Actually, even if you use routes to show various urls, the controller is on the same page, from the Typolight point of view. If you want to use the actions as seperated pages in the breadcrumb, use the ModuleRoutedBreadcrumb instead of the default one.

In the same way, you can use ControllerRoutedNav instead of ModuleCustomNavigation if you want to point navigation to specifics actions ( but this is more about routes than controllers, here ).

h2(#next). What's next?

Now you understand FrontendController, see [[BackendController]].
