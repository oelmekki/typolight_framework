Routes are piece of configuration that let you do whatever you want with urls. Say, you have a "Shop" page, and a "Order" page in this first one.  You would like to have, in your url, mydomain.com/shop/order.html rather than mydomain.com/order.html. You can do this with a route.



h2(#from-conf). Routes from configuration file

The first method is to use the configuration file of your extension. In your_extensions/config/config.php, add :

bc. $GLOBALS[ 'TL_ROUTES' ][ 'shop_order' ] = array( 
  'route'      => 'shop/order',
  'method'     => 'GET/POST',
  'resolveTo'  => 'order',
);

In your template, you can now put :

bc. <a href="<?php echo Route::compose( 'shop_order' ) ?>">Order</a>

the resolveTo value is the real page alias where the route should lead. The 'GET/POST' method value say the route match either for a GET or a POST request.  If you don't want it to be resolved for GET, just put 'method' => 'POST' ( and put 'method' => 'GET' if you don't wnt it to resolv on POST ).

If you use a FrontendController, you may want to point to a specific action.  Let say you have a ControllerShop instead, with actions product_list, product_show, add_to_cart and order.

You will put something like this in your config.php :

bc.. $GLOBALS[ 'TL_ROUTES' ][ 'shop_product_list' ] = array( 
  'route'      => 'shop/products/all',
  'method'     => 'GET/POST',
  'staticParams'  => array(
    'action' => 'product_list',
  ),
  'resolveTo'  => 'shop',
);

$GLOBALS[ 'TL_ROUTES' ][ 'shop_product_show' ] = array( 
  'route'      => 'shop/products/:product_id/show',
  'method'     => 'GET/POST',
  'staticParams'  => array(
    'action' => 'product_show',
  ),
  'resolveTo'  => 'shop',
);

$GLOBALS[ 'TL_ROUTES' ][ 'shop_add_to_cart' ] = array( 
  'route'      => 'shop/add/product/:product_id',
  'method'     => 'POST',
  'staticParams'  => array(
    'action' => 'add_to_cart',
  ),
  'resolveTo'  => 'shop',
);

$GLOBALS[ 'TL_ROUTES' ][ 'shop_order' ] = array( 
  'route'      => 'shop/order',
  'method'     => 'GET/POST',
  'staticParams'  => array(
    'action' => 'order',
  ),
  'resolveTo'  => 'shop',
);

p. You can pass anything you want as staticParams. It won't be shown in the url, but you still can retrieve it through $this->Input->get().

Notice that the shop_add_to_cart route only accept POST method, so you simply will have a 404 if you try to access it by GET.

shop_product_show and shop_add_to_cart both use a placeholder, :product_id.  Placeholders are marked by prefixing them with a ':'.  To compose a product show url, we can do :

bc. Route::compose( 'shop_product_show', array( 'product_id' => 3 ) );

And in the other way, mydomain.com/shop/products/3/show.html will resolve to the shop page, with the GET parameter 'action' set to 'product_show' and the GET parameter 'product_id' set to 3.

You can use as many placeholder you want, but beware : it's you responsability to check if the product 3 actually exists, here.



h2(#from-backend). Route from backend

If your not working on an extension, you can still use routes from the backend. Use the "Routes" module in the "Framework" section. You can add there routes in the very similar way. You should prefer to write routes in a config file everytimes you can, instead, because handling routes this way means making queries on the database.

If you don't write an extension, you're likely to want to use routes outside of a template, too. There are two ways to do this :
* you can use the insert tag {{Route:name:param1=value1:param2=value2}}
* you can use the ControllerRoutedNav to build a navigation upon routes.

